#!perl

use strict;
use warnings;

use Getopt::Long qw(:config bundling no_ignore_case);
use POSIX qw(ceil);

# AUTHORITY
# DATE
# DIST
# VERSION

my $tmp_freq;
my %Opts = (
    mode => 'line',
    ignore_case => 0,
    print_total => 0,
    print_freq => 1,
    # XXX options to limit memory usage, e.g. max keys, max line length, --md5 (like in nauniq), ...
    min_freq => undef,
    max_freq => undef,
    sort_args => {},
    sort_sub => undef,
    percent => 0,
    clear_before_output => 0,
    output_every => undef,
);
my $Numeric;
my %Occurences;

sub parse_cmdline {
    my $res = GetOptions(
        'bytes|c'   => sub { $Opts{mode} = 'byte' },
        'chars|m'   => sub { $Opts{mode} = 'char' },
        'words|w'   => sub { $Opts{mode} = 'word' },
        'lines|l'   => sub { $Opts{mode} = 'line' },
        'number|n'  => sub { $Opts{mode} = 'number' },
        'integer|i' => sub { $Opts{mode} = 'integer' },
        'ignore-case|f' => \$Opts{ignore_case},
        'no-print-freq|F' => sub { $Opts{print_freq} = 0 },
        'print-freq'      => sub { $Opts{print_freq} = 1 },
        'no-print-total|T' => sub { $Opts{print_total} = 0 },
        'print-total|t'    => sub { $Opts{print_total} = 1 },
        'freq=s'    => \$tmp_freq,
        'sort-sub=s' => \$Opts{sort_sub},
        'sort-arg=s%' => $Opts{sort_args},
        'a'   => sub { $Opts{sort_sub} = 'asciibetically' },
        'percent|p' => sub { $Opts{percent} = 1 },
        'print-percent' => sub { $Opts{print_percent} = 1; $Opts{percent} = 1 },
        'clear-before-output' => sub { $Opts{clear_before_output} = 1 },
        'output-every=i' => \$Opts{output_every},
        'help|h'  => sub {
            print <<USAGE;
Usage:
  freqtable [OPTIONS]... < INPUT
  freqtable --help (or -h)
Options:
  --bytes, -c
  --chars, -m
  --words, -w
  --lines, -l
  --number, -n
  --integer, -i
  --ignore-case, -f
  --print-freq
  --no-print-freq, -F
  --print-percent
  --print-total, -t
  --no-print-total, -T
  --freq N|M-N|M-|-N
  --sort-sub=SPEC
  --sort-arg=ARG=VAL
  -a
  --percent, -p
  --output-every=i
  --clear-before-output
For more details, see the manpage/documentation.
USAGE
            exit 0;
        },
    );

    if (defined $tmp_freq) {
        if ($tmp_freq =~ /\A\d+\z/) {
            $Opts{min_freq} = $Opts{max_freq} = $tmp_freq;
        } elsif ($tmp_freq =~ /\A-(\d+)\z/) {
            $Opts{max_freq} = $1;
        } elsif ($tmp_freq =~ /\A(\d+)-\z/) {
            $Opts{min_freq} = $1;
        } elsif ($tmp_freq =~ /\A(\d+)-(\d+)\z/) {
            $Opts{min_freq} = $1;
            $Opts{max_freq} = $2;
        } else {
            warn "freqtable: Invalid value for --freq: '$tmp_freq', ".
                "please specify N|M-N|M-|-N\n";
            $res = 0;
        }
    }

    exit 99 if !$res;
}

sub _print_freqline {
    my ($n, $k, $totoccurrences) = @_;

    if ($Opts{print_freq} || $Opts{print_percent}) {
        printf "%9d ", $n;
    }
    if ($Opts{print_freq} && $Opts{percent}) {
        my $pct = $totoccurrences == 0 ? 0 : $n/$totoccurrences*100;
        printf "%6.2f%% ", $pct;
    }
    print $k, "\n";
}

sub _display_table {
    my @keys = keys %Occurences;

    my $totoccurrences = 0;
    $totoccurrences += $Occurences{$_} for @keys;

    if (defined $Opts{sort_sub}) {
        require Sort::Sub;
        my $sorter = Sort::Sub::get_sorter($Opts{sort_sub}, $Opts{sort_args});
        @keys = sort $sorter @keys;
    } else {
        @keys = sort {
        $Occurences{$b} <=> $Occurences{$a} ||
            ($Numeric ? $a <=> $b : $a cmp $b)
        } @keys;
    }

    print "\033[2J" if $Opts{clear_before_output};

    for my $k (@keys) {
        my $n = $Occurences{$k};
        next if defined $Opts{min_freq} && $n < $Opts{min_freq};
        next if defined $Opts{max_freq} && $n > $Opts{max_freq};
        _print_freqline($n, $k, $totoccurrences);
    }

    _print_freqline($totoccurrences, "TOTAL", $totoccurrences) if $Opts{print_total};
}

sub run {
    $|++ if $Opts{output_every};

    my $i = 0;
    if ($Opts{mode} eq 'byte' || $Opts{mode} eq 'char') {
        @ARGV = (\*STDIN) unless @ARGV;
        for my $fn (@ARGV) {
            my $fh;
            if (ref $fn) {
                $fh = $fn;
            } else {
                open $fh, "<", $fn or do {
                    warn "freqtable: Can't open '$fn': $!\n";
                    next;
                };
            }
            if ($Opts{mode} eq 'byte') {
                binmode $fh;
            } else {
                binmode $fh, ":encoding(utf8)";
            }
            while (1) {
                read $fh, my $block, 4096;
                last if !length $block;
                for (split //, $block) {
                    $i++;
                    if ($Opts{ignore_case}) {
                        $Occurences{lc $_}++;
                    } else {
                        $Occurences{$_}++;
                    }
                    _display_table() if $Opts{output_every} && $i % $Opts{output_every} == 0;
                }
            }
        } # fn
    } elsif ($Opts{mode} eq 'word') {
        while (defined(my $line = <>)) {
            chomp $line;
            while ($line =~ /(\w+)/g) {
                $i++;
                if ($Opts{ignore_case}) {
                    $Occurences{lc $1}++;
                } else {
                    $Occurences{$1}++;
                }
                _display_table() if $Opts{output_every} && $i % $Opts{output_every} == 0;
            }
        }
    } elsif ($Opts{mode} eq 'line') {
        while (defined(my $line = <>)) {
            $i++;
            chomp $line;
            if ($Opts{ignore_case}) {
                $Occurences{lc $line}++;
            } else {
                $Occurences{$line}++;
            }
            _display_table() if $Opts{output_every} && $i % $Opts{output_every} == 0;
        }
    } elsif ($Opts{mode} eq 'number' || $Opts{mode} eq 'integer') {
        $Numeric++;
        while (defined(my $line = <>)) {
            $i++;
            my $num = $Opts{mode} eq 'integer' ? int($line) : $line + 0;
            $Occurences{$num}++;
            _display_table() if $Opts{output_every} && $i % $Opts{output_every} == 0;
        }
    } else {
        die "freqtable: BUG: Unknown mode '$Opts{mode}'";
    }

    _display_table();
}

# MAIN

parse_cmdline();
run();

1;
# ABSTRACT: Print frequency table of lines/words/characters/bytes/numbers
# PODNAME:

=head1 SYNOPSIS

 % freqtable [OPTIONS] < INPUT

Sample input:

 % cat input-lines.txt
 one
 one
 two
 three
 four
 five
 five
 five
 six
 seven
 eight
 eight
 nine

 % cat input-words.txt
 one one two three four five five five six seven eight eight nine

 % cat input-nums.txt
 9.99 cents
 9.99 dollars
 9 cents

=head2 Modes

Display frequency table (by default: lines):

 % freqtable input-lines.txt
 3       five
 2       eight
 2       one
 1       four
 1       nine
 1       seven
 1       six
 1       three
 1       two

Display frequency table (words):

 % freqtable -w input-words.txt
 3       five
 2       eight
 2       one
 1       four
 1       nine
 1       seven
 1       six
 1       three
 1       two

Display frequency table (characters):

 % freqtable -c input-words.txt
 12
 12      e
  7      i
  5      n
  4      f
  4      o
  4      t
  4      v
  3      h
  2      g
  2      r
  2      s
  1

  1      u
  1      w
  1      x

Display frequency table (nums):

 % freqtable -n input-nums.txt
 2      9.99
 1      9

Display frequency table (integers):

 % freqtable -i input-nums.txt
 3      9

=head2 -F option

Don't display the frequencies:

 % freqtable -F input-lines.txt
 five
 eight
 one
 four
 nine
 seven
 six
 three
 two

=head2 Filter by frequencies

Only display lines that appear three times:

 % freqtable -F input-lines.txt --freq 3
 3       five

Only display lines that appear more than once:

 % freqtable -F input-lines.txt --freq 2-
 3       five
 2       eight
 2       one

Only display lines that appear less than three times:

 % freqtable -F input-lines.txt --freq -2
 2       eight
 2       one
 1       four
 1       nine
 1       seven
 1       six
 1       three
 1       two

=head2 Sorting

Instead of the default sorting by frequency (descending order), if you specify
C<--sort-sub> (and optionally one or more C<--sort-arg>) you can sort by the
keys using one of L<Sort::Sub>::* subroutines. Examples:

 # sort by keys, asciibetically
 % freqtable -F input-lines.txt --sort-sub asciibetically
 2       eight
 3       five
 1       four
 1       nine
 2       one
 1       seven
 1       six
 1       three
 1       two

 # sort by keys, asciibetically (descending order)
 % freqtable -F input-lines.txt --sort-sub 'asciibetically<r>'
 1       two
 1       three
 1       six
 1       seven
 2       one
 1       nine
 1       four
 3       five
 2       eight

 # sort by keys, randomly using perl code (essentially, shuffling)
 % freqtable -F input-lines.txt --sort-sub 'by_perl_code' --sort-arg 'code=int(rand()*3)-1'
 3       five
 1       three
 2       eight
 1       seven
 2       one
 1       six
 1       nine
 1       two
 1       four


=head1 DESCRIPTION

This utility counts the occurences of lines (or words/characters) in the input
then display each unique lines along with their number of occurrences. You can
also instruct it to only show lines that have a specified number of occurrences.

You can use the following Unix command to count occurences of lines:

 % sort input-lines.txt | uniq -c | sort -nr

and with a bit more work you can also use a combination of existing Unix
commands to count occurrences of words/characters, as well as filter items that
have a specified number of occurrences; freqtable basically offers convenience.


=head1 OPTIONS

=over

=item * --bytes, -c

=item * --chars, -m

=item * --words, -w

=item * --lines, -l

=item * --number, -n

Treat each line as a number. A line like this:

 9.99 cents

will be regarded as:

 9.99

=item * --integer, -i

Treat each line as an integer. A line like this:

 9.99 cents

will be regarded as:

 9

=item * --ignore-case, -f

=item * --no-print-freq, -F

Will not print the frequencies.

=item * --print-total, -t

Print the total line at the bottom.

=item * --no-print-total, -T

Do not print the total line at the bottom (the default).

=item * --freq=s

Filter by frequencies. C<N> (e.g. --freq 5) means only display items that occur
N times. C<M-N> (e.g. --freq 5-10) means only display items that occur between M
and N times. C<M-> (e.g. --freq 5-) means only display items that occur at least
M times. C<-N> (e.g. --freq -10) means only display items that occur at most N
times.

=item * --sort-sub=s

This will cause C<freqtable> to sort by key name instead of by frequencies. You
pass this option to specify a L<Sort::Sub> routine, which is the name of a
C<Sort::Sub::*> module without the C<Sort::Sub::> prefix, e.g.
C<asciibetically>. The name can optionally be followed by C<< <i> >>, or C<< <r>
>>, or C<< <ir> >> to mean case-insensitive sorting, reverse order, and reverse
order case-insensitive sorting, respectively. When you use one of these suffixes
on the command-line, remember to quote since C<< < >> and C<< > >> can be
intereprted by shell.

Examples:

 asciibetically
 asciibetically<i>
 by_length<r>

=item * --sort-arg=ARGNAME=ARGVALUE

Pass argument(s) to the sort subroutine. Can be specified multiple times, once
for every argument.

=item * -a

Shortcut for C<--sort=asciibetically>.

=item * --print-percent

Also print percentages as well as frequencies.

=item * --percent, -p

Show frequencies as percentages.

=item * --output-every=i

If set, then after every specified number of input data
(bytes/characters/words/lines), will output the "running" (current) frequency
table.

=item * --clear-before-output

Emit ANSI escape codes "\033[2J" before each output to clear the screen.

=back


=head1 EXIT CODES

0 on success.

255 on I/O error.

99 on command-line options error.


=head1 FAQ


=head1 SEE ALSO

Unix commands B<wc>, B<sort>, B<uniq>

L<wordstat> from L<App::wordstat>

L<csv-freqtable> from L<App::CSVUtils>

=cut
